package com.capital7software.aoc.lib.grid;

import java.util.regex.Pattern;

/**
 * The codes are printed on an infinite sheet of paper, starting in the top-left corner.
 * The codes are filled in by diagonals: starting with the first row with an empty first box,
 * the codes are filled in diagonally up and to the right. This process repeats until
 * the infinite paper is covered. So, the first few codes are filled in in this order:
 *
 * <p><br>
 * <code>
 * &nbsp;&nbsp;| 1&nbsp;2&nbsp;3&nbsp; 4&nbsp; 5&nbsp; 6  <br>
 * ---+---+---+---+---+---+---+<br>
 * 1 |  1   3   6  10  15  21<br>
 * 2 |  2   5   9  14  20<br>
 * 3 |  4   8  13  19<br>
 * 4 |  7  12  18<br>
 * 5 | 11  17<br>
 * 6 | 16<br>
 * </code>
 *
 * <p><br>
 * For example, the 12th code would be written to row 4, column 2; the
 * 15th code would be written to row 1, column 5.
 *
 * <p><br>
 * The voice on the other end of the phone continues with how the codes are actually generated.
 * The first code is 20151125. After that, each code is generated by taking the previous one,
 * multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.
 *
 * <p><br>
 * So, to find the second code (which ends up in row 2, column 1), start with the previous value,
 * 20151125. Multiply it by 252533 to get 5088824049625. Then, divide that by 33554393,
 * which leaves a remainder of 31916031. That remainder is the second code.
 *
 * <p><br>
 * "Oh!", says the voice. "It looks like we missed a scrap from one of the manuals.
 * Let me read it to you." You write down his numbers:
 *
 * <p><br>
 * <code>
 * &nbsp;&nbsp;| &nbsp;&nbsp;&nbsp; 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 * 2  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 * 4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6<br>
 * ---+---------+---------+---------+---------+---------+---------+<br>
 * 1 | 20151125  18749137  17289845  30943339  10071777  33511524<br>
 * 2 | 31916031  21629792  16929656   7726640  15514188   4041754<br>
 * 3 | 16080970   8057251   1601130   7981243  11661866  16474243<br>
 * 4 | 24592653  32451966  21345942   9380097  10600672  31527494<br>
 * 5 |    77061  17552253  28094349   6899651   9250759  31663883<br>
 * 6 | 33071741   6796745  25397450  24659492   1534922  27995004<br>
 * </code>
 *
 * <p><br>
 * "Now remember", the voice continues, "that's not even all the first few numbers;
 * for example, you're missing the one at 7,1 that would come before 6,2.
 * But, it should be enough to let your-- oh, it's time for lunch! Bye!" The call disconnects.
 *
 * <p><br>
 * Santa looks nervous. Your puzzle input contains the message on the machine's console.
 * What code do you give the machine?
 *
 * <p><br>
 * The machine springs to life, then falls silent again. It beeps. "Insufficient fuel",
 * the console reads. "Fifty stars are required before proceeding. One star is available."
 *
 * <p><br>
 * ..."one star is available"? You check the fuel tank; sure enough, a lone star sits at the
 * bottom, awaiting its friends. Looks like you need to provide 49 yourself.
 *
 * <p><br>
 * You have enough stars to start the weather machine.
 *
 * <p><br>
 * You fill the weather machine with fifty stars. It comes to life!
 *
 * <p><br>
 * Snow begins to fall.
 *
 * <p><br>
 * Congratulations! You've finished every puzzle in Advent of Code 2015!
 * I hope you had as much fun solving them as I had making them for you.
 * I'd love to hear about your adventure; you can get in touch with me via
 * contact info on my website or through Twitter or Mastodon.
 *
 * @param targetRow    The row to calculate the code for.
 * @param targetColumn The column to calculate the code for.
 */
public record CodeGenerator(int targetRow, int targetColumn) {
  private static final int MULTIPLIER = 252533;
  private static final int DIVISOR = 33554393;
  private static final int START_CODE = 20151125;

  /**
   * Builds and returns a new CodeGenerator instance. The input format is simply two numbers.
   * The first number is the row and the second number is the column to get the code for.
   *
   * @param input The row and column to calculate the code for.
   * @return A new CodeGenerator instance for the specified row and column.
   */
  public static CodeGenerator buildGenerator(String input) {
    var matcher = Pattern.compile("(\\d+)(\\d+)").matcher(input);

    var targetRow = 0;
    var targetColumn = 0;

    var row = true;

    while (matcher.find()) {
      if (row) {
        targetRow = Integer.parseInt(matcher.group());
        row = false;
      } else {
        targetColumn = Integer.parseInt(matcher.group());
      }
    }

    return new CodeGenerator(targetRow, targetColumn);
  }

  /**
   * Calculates and returns the code for the targeted row and column.
   *
   * @return The code for the targeted row and column.
   */
  public long calculateCode() {
    var currentRow = 1L;
    var currentColumn = 1L;
    long code = START_CODE;

    // we are done!
    while (currentRow != targetRow || currentColumn != targetColumn) {
      if (currentRow == 1) {
        currentRow = currentColumn + 1;
        currentColumn = 1;
      } else {
        currentRow--;
        currentColumn++;
      }


      code = next(code);

    }

    return code;
  }

  /**
   * Calculates the next code in the sequence given the specified code.
   *
   * @param currentCode The code to generate the next code for.
   * @return The code that follows the specified code.
   */
  public long next(long currentCode) {
    return (currentCode * MULTIPLIER) % DIVISOR;
  }
}
